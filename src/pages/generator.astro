---
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <div
    class="flex flex-col items-center justify-center min-h-screen bg-base-200 p-6 bg-pink-300 glass"
  >
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 w-full max-w-5xl">
      <div
        class="card bg-base-100 shadow-xl p-6 flex items-center justify-center min-h-[300px]"
      >
        <div id="svg-output" class="flex items-center justify-center"></div>
      </div>

      <div class="card bg-base-100 shadow-xl p-6">
        <pre
          id="svg-code"
          class="bg-base-300 p-4 rounded-lg overflow-x-auto text-sm">
        </pre>
      </div>
    </div>

    <form class="form-control mt-6 w-full max-w-3xl flex flex-row gap-4">
      <input
        type="text"
        id="prompt"
        name="prompt"
        required
        placeholder="Tapez votre idée..."
        class="input input-bordered flex-grow"
      />
      <button
        id="generateButton"
        type="submit"
        class="btn btn-primary bg-purple-400"
      >
        Generate
      </button>
    </form>

    <button class="btn btn-secondary m-2" id="edit-button">Edit</button>

    <h2 class="text-3xl font-bold">Sauvegardez votre SVG</h2>
    <input
      type="text"
      id="svg-name"
      placeholder="Nom du SVG"
      class="mt-5 input input-bordered"
    />

    <button
      type="submit"
      id="save-button"
      class="btn btn-secondary mt-5 bg-red-800 mb-6">Sauvegarder</button
    >
  </div>
</Layout>

<script>
  //@ts-nocheck
  let promptList = [];
  const generateButton = document.getElementById("generateButton");
  const editButton = document.getElementById("edit-button");
  const saveButton = document.getElementById("save-button");
  const svgOutput = document.getElementById("svg-output");
  const svgCode = document.getElementById("svg-code");
  const promptElement = document.getElementById("prompt");

  async function generateSVG(prompt) {
    console.log("Generating SVG for prompt:", prompt);
    const res = await fetch("/api/generateSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(prompt),
    });
    const data = await res.json();
    return data.svg;
  }

  async function handleSubmit() {
    let prompt = promptElement ? promptElement.value : "";
    console.log("submitted: ", prompt);

    // Réinitialiser la liste des prompts
    promptList.length = 0;
    promptList.push({ role: "user", content: prompt });

    // Afficher un spinner
    svgOutput.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;
    editButton.disabled = true;

    // Appeler la fonction pour générer le SVG
    let aiResponse = await generateSVG(promptList);
    console.log("AI Response: ", aiResponse);

    // Extraire le SVG de la réponse
    const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
    const svgContent = svgMatch ? svgMatch[0] : "";
    console.log("svgCode: ", svgContent);

    // Ajouter la réponse de l'IA à la liste des prompts
    promptList.push({ role: "assistant", content: svgContent });

    // Afficher le SVG généré
    svgOutput.innerHTML = svgContent; // rendu visuel
    svgCode.textContent = svgContent; // code brut

    // Réactiver les boutons
    generateButton.disabled = false;
    editButton.disabled = false;
  }

  generateButton?.addEventListener("click", handleSubmit);

  async function handleEdit() {
    let prompt = "";
    let aiResponse = "";

    prompt = promptElement ? promptElement.value : "";
    console.log("Prompt soumis : ", prompt);
    // Ajout du prompt de l'utilisateur à la liste
    promptList.push({ role: "user", content: prompt });
    // Afficher un spinner de chargement
    svgOutput.innerHTML += `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;
    editButton.disabled = true;

    // Appeler la fonction pour générer le SVG
    aiResponse = await generateSVG(promptList);
    // Extraire le SVG de la réponse
    const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
    aiResponse.content = svgMatch ? svgMatch[0] : "";
    console.log("Code SVG généré : ", aiResponse.content);
    // Ajouter la réponse de l'IA à la liste des prompts
    promptList.push(aiResponse);
    // Afficher le SVG généré
    svgOutput.textContent = aiResponse.content;
    svgCode.innerHTML = aiResponse.content;
    // Réactiver les boutons
    generateButton.disabled = false;
    editButton.disabled = false;
    console.log("Historique des prompts : ", promptList);
  }

  if (editButton) {
    editButton.addEventListener("click", handleEdit);
  }

  if (saveButton) {
    saveButton.addEventListener("click", async () => {
      const name = prompt("Entrez un nom pour le SVG :");
      const svgOutput = document.getElementById("svg-output")?.textContent;
      console.log("Sauvegarde du SVG : ", JSON.stringify(svgOutput));

      const params = {
        nom: name,
        code_svg: svgOutput || "<svg></svg>",
        chat_history: JSON.stringify(promptList),
      };
      await saveSVG(params);
    });
  }

  async function saveSVG(params) {
    // Envoi de la requête à notre endpoint
    const res = await fetch("/api/saveSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(params),
    });
    return await res.json();
  }

  // Gestionnaire d'événements pour le bouton de sauvegarde
  if (saveButton) {
    saveButton.addEventListener("click", async () => {
      // Préparation des données pour la sauvegarde
      const params = {
        nom: name,
        code_svg: svgOutput || "<svg></svg>", // SVG par défaut si vide
        chat_history: JSON.stringify(promptList), // Historique des échanges
      };

      // Sauvegarde et gestion de la réponse
      const result = await saveSVG(params);
      if (result.success) {
        alert("SVG sauvegardé avec succès !");
      } else {
        alert("Erreur lors de la sauvegarde : " + result.error);
      }
    });
  }
</script>

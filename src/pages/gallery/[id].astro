---
import Layout from "../../layouts/Layout.astro";
import pb from "../../../utils/pb";
import { Collections } from "../../../utils/pocketbase-types";

const { id } = Astro.params;

if (!id) {
  throw new Error("ID is required");
}

let svg;
try {
  svg = await pb.collection(Collections.SvgCollection).getOne(id);
} catch (err) {
  svg = null;
}
---

<Layout title={`SVG - ${svg?.name || id}`}>
  <div
    class="container mx-auto px-4 py-8 flex flex-col gap-6 relative min-h-[80vh]"
  >
    <!-- Preview SVG -->
    <div
      id="svg-preview"
      class="border rounded-lg p-6 bg-base-200 flex justify-center items-center"
    >
      {
        svg?.code_svg ? (
          <div set:html={svg.code_svg} />
        ) : (
          <span class="text-gray-400">Pas encore de SVG généré</span>
        )
      }
    </div>

    <!-- Chat history -->
    <div
      id="chat-history"
      class="flex flex-col gap-4 w-full overflow-y-auto flex-1"
    >
      {
        Array.isArray(svg?.chat_history) && svg.chat_history.length > 0 ? (
          svg.chat_history.map((msg) => (
            <div
              class={`chat ${msg.role === "user" ? "chat-start" : "chat-end"}`}
            >
              <div
                class={`chat-bubble ${msg.role === "user" ? "bg-primary text-primary-content" : "bg-secondary text-secondary-content"}`}
              >
                <pre>{msg.content}</pre>
              </div>
              <div class="chat-footer opacity-60 text-xs mt-1">{msg.role}</div>
            </div>
          ))
        ) : (
          <span class="text-error">Aucun historique de chat.</span>
        )
      }
    </div>

    <!-- Formulaire -->
    <form
      id="input-prompt-form"
      class="flex flex-col gap-2 w-full sticky bottom-0 bg-base-300 p-4"
      method="POST"
      autocomplete="off"
    >
      <input
        type="hidden"
        name="history"
        value={JSON.stringify(svg?.chat_history || [])}
      />
      <input type="hidden" name="id" value={svg?.id} />
      <div class="flex items-center gap-2">
        <input
          id="prompt-input"
          name="editPrompt"
          type="text"
          class="input flex-grow"
          placeholder="Enter a prompt to edit the SVG..."
        />
        <button class="btn btn-primary" type="submit">Edit</button>
      </div>
    </form>
  </div>
</Layout>

<script>
  //@ts-nocheck
  const form = document.getElementById("input-prompt-form");
  const svgPreview = document.getElementById("svg-preview");
  const chatHistory = document.getElementById("chat-history");

  async function generateSVG(prompt) {
    try {
      const response = await fetch("/api/generate-svg", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt }),
      });
      const data = await response.json();
      return data.svg;
    } catch (err) {
      console.error("Erreur generateSVG:", err);
      return "<span class='text-error'>Erreur génération SVG</span>";
    }
  }

  async function update(updatedData) {
    try {
      const response = await fetch("/api/updateSVG", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(updatedData),
      });
      return await response.json();
    } catch (err) {
      console.error("Erreur update:", err);
      return { success: false };
    }
  }

  form?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    const promptText = formData.get("editPrompt");
    if (!promptText) return;

    const prompt = { role: "user", content: promptText };
    const history = formData.get("history")
      ? JSON.parse(formData.get("history"))
      : [];
    history.push(prompt);

    // Reset champ texte
    document.getElementById("prompt-input").value = "";

    // Afficher prompt dans le chat
    chatHistory.innerHTML += `
      <div class="chat chat-start">
        <div class="chat-bubble bg-primary text-primary-content">
          <pre>${prompt.content}</pre>
        </div>
        <div class="chat-footer opacity-60 text-xs mt-1">user</div>
      </div>
    `;
    chatHistory.scrollTop = chatHistory.scrollHeight;

    // Afficher loader
    svgPreview.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;

    // Génération SVG IA
    let aiResponse = await generateSVG(prompt);
    history.push({ role: "assistant", content: aiResponse });

    // Extraire le SVG si présent
    const svgMatch = aiResponse.match(/<svg[\s\S]*?<\/svg>/i);
    const svgCode = svgMatch ? svgMatch[0] : `<span>${aiResponse}</span>`;

    // Mise à jour preview
    svgPreview.innerHTML = svgCode;

    // Ajouter réponse IA dans le chat
    chatHistory.innerHTML += `
      <div class="chat chat-end">
        <div class="chat-bubble bg-secondary text-secondary-content">
          <pre>${aiResponse}</pre>
        </div>
        <div class="chat-footer opacity-60 text-xs mt-1">assistant</div>
      </div>
    `;
    chatHistory.scrollTop = chatHistory.scrollHeight;

    // Update PocketBase
    const updateResponse = await update({
      id: formData.get("id"),
      code_svg: svgCode,
      chat_history: history,
    });

    if (!updateResponse.success) {
      alert("Échec de la mise à jour du SVG");
    }
  });
</script>
